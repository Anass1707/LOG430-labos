version: '3.8'

services:
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx-lb
  #   networks:
  #     - default
  #   ports:
  #     - "8080:80"
  #   depends_on:
  #     - app
  #     - app2
  #     - app3
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf

  saga-orchestrator:
    build:
      context: ./saga
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - ventes-service
      - logistique-service
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/psql
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - default
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8088:8081"
    depends_on:
      - ventes-service
      - app
      - logistique-service
      - saga-orchestrator
    networks:
      - default
  app:
    build:
      context: ./monolithique
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    environment:
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/psql
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - default
  
  # app2:
  #   build:
  #     context: ./monolithique
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - db
  #     - redis
  #   environment:
  #     SPRING_REDIS_HOST: redis
  #     SPRING_REDIS_PORT: 6379
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/psql
  #     SPRING_DATASOURCE_USERNAME: admin
  #     SPRING_DATASOURCE_PASSWORD: admin
  #   networks:
  #     - default

  # app3:
  #   build:
  #     context: ./monolithique
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - db
  #     - redis
  #   environment:
  #     SPRING_REDIS_HOST: redis
  #     SPRING_REDIS_PORT: 6379
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/psql
  #     SPRING_DATASOURCE_USERNAME: admin
  #     SPRING_DATASOURCE_PASSWORD: admin
  #   networks:
  #     - default
    
  ventes-service:
    build:
      context: ./microservices/ventesServices
      dockerfile: Dockerfile
    depends_on:
      - ventes-db
      - redis
    ports:
      - "8081:8080"
    environment:
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://ventes-db:5432/ventesdb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - default

  logistique-service:
    build:
      context: ./microservices/logistiqueServices
      dockerfile: Dockerfile
    depends_on:
      - logistique-db
      - redis
    ports:
      - "8082:8080"
    environment:
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATASOURCE_URL: jdbc:postgresql://logistique-db:5432/logistiquedb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    networks:
      - default
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: psql
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  ventes-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: ventesdb
    ports:
      - "5433:5432"
    volumes:
      - pgdata-vente:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    
  logistique-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: logistiquedb
    ports:
      - "5434:5432"
    volumes:
      - pgdata-logistique:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:latest
    depends_on:
      - ventes-db
      - logistique-db
    ports:
      - "6378:6379"
    command: ["redis-server", "--bind", "0.0.0.0"]
    networks:
    - default

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always

  redis-ventes:
    image: redis:latest
    depends_on:
      - db
    ports:
      - "6379:6379"
    command: ["redis-server", "--bind", "0.0.0.0"]
    networks:
    - default
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./Monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./Monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./Monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  pgdata:
  grafana-storage:
  pgdata-vente:
  pgdata-logistique:

networks:
  default:
    driver: bridge