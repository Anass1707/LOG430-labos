@startuml
' Architecture microservices orchestrée avec publication d’événements via RabbitMQ

package "Infrastructure" {
  [NGINX] <<LoadBalancer>>
  [API Gateway] <<Gateway>>
  [RabbitMQ] <<MessageBroker>>
  [Redis] <<Cache>>
  [Prometheus] <<Monitoring>>
  [Grafana] <<Dashboard>>
}

package "Service Saga Orchestrateur" {
  [SagaOrchestrator] <<Service>>
  [EventPublisher] <<Publisher>>
}

package "Microservice Vente" {
  [VenteController] <<RestController>>
  [VenteService] <<Service>>
  [VenteRepository] <<Repository>>
}

package "Microservice Produit" {
  [ProduitController] <<RestController>>
  [ProduitService] <<Service>>
  [ProduitRepository] <<Repository>>
}

package "Microservice Stock" {
  [StockController] <<RestController>>
  [StockService] <<Service>>
  [StockRepository] <<Repository>>
}


package "Microservice Rapport" {
  [RapportController] <<RestController>>
  [RapportService] <<Service>>
  [RapportRepository] <<Repository>>
}

' Flux principal
[NGINX] -down-> [API Gateway]
[API Gateway] -down-> [SagaOrchestrator]

' Saga appelle directement les services
[SagaOrchestrator] -down-> [VenteController]
[SagaOrchestrator] -down-> [ProduitController]
[SagaOrchestrator] -down-> [StockController]
[SagaOrchestrator] -down-> [RapportController]

' Saga publie des événements après chaque étape
[SagaOrchestrator] --> [EventPublisher] : publish(type, transactionId)

[EventPublisher] --> [RabbitMQ] : envoi message

' Monitoring
[Prometheus] .down.> [API Gateway]
[Prometheus] .down.> [SagaOrchestrator]
[Prometheus] .down.> [VenteController]
[Prometheus] .down.> [ProduitController]
[Prometheus] .down.> [StockController]
[Prometheus] .down.> [RapportController]
[Grafana] ..> [Prometheus]

' Accès au cache
[VenteService] .up.> [Redis]
[ProduitService] .up.> [Redis]
[StockService] .up.> [Redis]
[RapportService] .up.> [Redis]

@enduml